import { TrendsService } from './trendsService';
import { VideoBlock } from '@/types/database';

interface ScriptGenerationParams {
  character: any;
  duration: number;
  contentType: string;
  country: string;
  customTopic?: string;
}

interface GeneratedScript {
  title: string;
  blocks: VideoBlock[];
  hashtags: {
    tiktok: string[];
    instagram: string[];
    youtube: string[];
  };
  trendingTopic: string;
  hookStrategy: string;
}

export class IntelligentScriptService {
  private trendsService: TrendsService;
  
  constructor() {
    this.trendsService = TrendsService.getInstance();
  }

  async generateIntelligentScript(params: ScriptGenerationParams): Promise<GeneratedScript> {
    console.log('üöÄ Iniciando gera√ß√£o inteligente de roteiro...');
    
    // FASE 1: Buscar tend√™ncias reais
    const trends = await this.trendsService.getCurrentTrends(params.country, params.contentType);
    const mainTrend = trends[0] || { keyword: 'Tend√™ncia viral', relatedQueries: [], hashtags: [] };
    
    console.log(`üìà Tend√™ncia principal: ${mainTrend.keyword}`);
    
    // FASE 2: Gerar hook envolvente
    const hookStrategy = this.generateHookStrategy(params.contentType, mainTrend.keyword);
    
    // FASE 3: Criar estrutura narrativa
    const narrative = this.createNarrativeStructure(
      params.character,
      mainTrend,
      params.contentType,
      params.duration,
      hookStrategy
    );
    
    // FASE 4: Gerar blocos detalhados
    const blocks = this.generateDetailedBlocks(
      narrative,
      params.character,
      params.duration,
      mainTrend
    );
    
    // FASE 5: Otimizar hashtags
    const hashtags = this.trendsService.generateOptimizedHashtags(
      mainTrend.keyword,
      mainTrend.relatedQueries,
      params.country,
      params.contentType
    );
    
    // FASE 6: Criar t√≠tulo viral
    const title = this.generateViralTitle(
      params.character.name,
      mainTrend.keyword,
      params.contentType
    );
    
    console.log('‚úÖ Roteiro inteligente gerado com sucesso!');
    
    return {
      title,
      blocks,
      hashtags,
      trendingTopic: mainTrend.keyword,
      hookStrategy
    };
  }

  private generateHookStrategy(contentType: string, trendKeyword: string): string {
    const hookStrategies = {
      trending: [
        `Personagem trope√ßa e derruba algo enquanto fala sobre ${trendKeyword}`,
        `Personagem finge n√£o saber sobre ${trendKeyword} mas depois revela conhecimento profundo`,
        `Personagem come√ßa fazendo algo totalmente diferente mas conecta com ${trendKeyword}`,
        `Personagem reage de forma exagerada ao descobrir ${trendKeyword}`,
        `Personagem faz uma previs√£o "errada" sobre ${trendKeyword} que depois se revela genial`
      ],
      comedy: [
        `Personagem tenta imitar ${trendKeyword} mas falha de forma hil√°ria`,
        `Personagem confunde ${trendKeyword} com algo completamente diferente`,
        `Personagem faz uma piada ruim sobre ${trendKeyword} mas insiste que √© engra√ßada`,
        `Personagem tenta ser s√©rio sobre ${trendKeyword} mas situa√ß√µes c√¥micas acontecem`,
        `Personagem imita diferentes pessoas reagindo a ${trendKeyword}`
      ],
      horror: [
        `Personagem encontra algo perturbador relacionado a ${trendKeyword}`,
        `Personagem ouve ru√≠dos estranhos enquanto pesquisa ${trendKeyword}`,
        `Personagem descobre uma verdade sombria sobre ${trendKeyword}`,
        `Personagem √© perseguido por algo ligado a ${trendKeyword}`,
        `Personagem tem pesadelos envolvendo ${trendKeyword}`
      ]
    };
    
    const strategies = hookStrategies[contentType as keyof typeof hookStrategies] || hookStrategies.trending;
    return strategies[Math.floor(Math.random() * strategies.length)];
  }

  private createNarrativeStructure(character: any, trend: any, contentType: string, duration: number, hookStrategy: string) {
    const blockCount = Math.ceil(duration / 8);
    
    const narrativeTemplates = {
      trending: {
        setup: `${character.name} descobre a tend√™ncia "${trend.keyword}" de forma inesperada`,
        conflict: `Algo d√° errado ou ${character.name} tem uma rea√ß√£o √∫nica √† tend√™ncia`,
        resolution: `${character.name} domina a tend√™ncia e mostra como aproveit√°-la`,
        cta: `Convida o p√∫blico a participar da tend√™ncia`
      },
      comedy: {
        setup: `${character.name} tenta entender "${trend.keyword}" mas de forma hil√°ria`,
        conflict: `Situa√ß√µes c√¥micas se acumulam enquanto ${character.name} explora o tema`,
        resolution: `${character.name} finalmente "entende" mas de forma ainda mais engra√ßada`,
        cta: `Desafia o p√∫blico a tentar fazer melhor`
      },
      horror: {
        setup: `${character.name} investiga algo perturbador sobre "${trend.keyword}"`,
        conflict: `A situa√ß√£o se torna cada vez mais assustadora e misteriosa`,
        resolution: `${character.name} revela uma verdade chocante ou escapa por pouco`,
        cta: `Avisa o p√∫blico sobre os perigos ou mist√©rios`
      }
    };
    
    const template = narrativeTemplates[contentType as keyof typeof narrativeTemplates] || narrativeTemplates.trending;
    
    return {
      hookStrategy,
      blockCount,
      template,
      pacing: this.calculatePacing(duration, blockCount)
    };
  }

  private calculatePacing(duration: number, blockCount: number): string[] {
    const blockDuration = duration / blockCount;
    
    if (blockCount === 1) {
      return ['hook-conflict-resolution'];
    } else if (blockCount === 2) {
      return ['hook-setup', 'conflict-resolution'];
    } else if (blockCount === 3) {
      return ['hook-setup', 'conflict-development', 'resolution-cta'];
    } else {
      return ['hook-setup', 'conflict', 'development', 'resolution-cta'];
    }
  }

  private generateDetailedBlocks(narrative: any, character: any, duration: number, trend: any): VideoBlock[] {
    const blocks: VideoBlock[] = [];
    const blockDuration = Math.ceil(duration / narrative.blockCount);
    
    for (let i = 1; i <= narrative.blockCount; i++) {
      const timeRange = `${(i-1) * blockDuration}-${i * blockDuration}s`;
      const paceElement = narrative.pacing[Math.min(i-1, narrative.pacing.length-1)];
      
      blocks.push({
        number: i,
        duration: timeRange,
        scene: this.generateSceneDescription(i, narrative, trend, paceElement),
        character: this.generateCharacterDirection(character, i, narrative, trend),
        camera: this.generateCameraWork(i, narrative.blockCount, paceElement),
        setting: this.generateSetting(i, narrative, trend),
        lighting: this.generateLighting(i, narrative.blockCount, paceElement),
        audio: this.generateAudioDirection(character, i, narrative, trend),
        transition: i < narrative.blockCount ? this.generateTransition(i, narrative.blockCount) : undefined
      });
    }
    
    return blocks;
  }

  private generateSceneDescription(blockNumber: number, narrative: any, trend: any, paceElement: string): string {
    const sceneTemplates = {
      'hook-setup': [
        `${narrative.hookStrategy}. A cena come√ßa de forma inesperada para capturar aten√ß√£o imediata.`,
        `Abertura impactante: personagem em situa√ß√£o inusitada relacionada a "${trend.keyword}".`,
        `Hook visual forte: algo quebra o padr√£o normal e prende o viewer nos primeiros 2 segundos.`
      ],
      'conflict': [
        `O conflito se intensifica. Personagem enfrenta desafio relacionado √† tend√™ncia "${trend.keyword}".`,
        `Momento de tens√£o: as coisas n√£o saem como esperado com "${trend.keyword}".`,
        `Complica√ß√£o narrativa que mant√©m o p√∫blico engajado e curioso.`
      ],
      'development': [
        `Desenvolvimento da hist√≥ria. Personagem explora mais profundamente "${trend.keyword}".`,
        `Revela√ß√µes importantes sobre a tend√™ncia e como ela impacta o personagem.`,
        `Constru√ß√£o emocional que conecta o p√∫blico com a jornada do personagem.`
      ],
      'resolution-cta': [
        `Resolu√ß√£o satisfat√≥ria. Personagem domina "${trend.keyword}" e convida participa√ß√£o.`,
        `Conclus√£o impactante com call-to-action claro para o p√∫blico.`,
        `Final que incentiva engajamento e compartilhamento do conte√∫do.`
      ]
    };
    
    const templates = sceneTemplates[paceElement as keyof typeof sceneTemplates] || sceneTemplates['hook-setup'];
    return templates[Math.floor(Math.random() * templates.length)];
  }

  private generateCharacterDirection(character: any, blockNumber: number, narrative: any, trend: any): string {
    const baseDirection = `${character.visual_prompt}. CONSIST√äNCIA VISUAL: Manter exatamente a mesma apar√™ncia em todos os blocos.`;
    
    const emotionalJourney = {
      1: 'Express√£o de surpresa e curiosidade inicial',
      2: 'Demonstra envolvimento crescente e determina√ß√£o', 
      3: 'Mostra confian√ßa e dom√≠nio do assunto',
      4: 'Expressa entusiasmo e convida participa√ß√£o'
    };
    
    const emotion = emotionalJourney[blockNumber as keyof typeof emotionalJourney] || 'Mant√©m energia positiva e engajamento';
    
    return `${baseDirection} ${emotion}. Personagem deve ser carism√°tico e aut√™ntico ao abordar "${trend.keyword}".`;
  }

  private generateCameraWork(blockNumber: number, totalBlocks: number, paceElement: string): string {
    const cameraStyles = {
      'hook-setup': [
        'Close-up dram√°tico no rosto, 35mm, movimento de push-in r√°pido para criar impacto imediato',
        'Plano m√©dio com zoom s√∫bito, handheld para energia, foco na rea√ß√£o inicial do personagem',
        '√Çngulo holand√™s para criar tens√£o, movimento de c√¢mera din√¢mico para quebrar expectativas'
      ],
      'conflict': [
        'Plano americano com movimento de tracking lateral, 50mm, seguindo a a√ß√£o do personagem',
        'C√¢mera na m√£o com cortes r√°pidos, m√∫ltiplos √¢ngulos para intensificar o conflito',
        'Plano sequ√™ncia com zoom-out revelando o contexto completo da situa√ß√£o'
      ],
      'development': [
        'Plano m√©dio est√°vel, 35mm, movimento suave de dolly para acompanhar o desenvolvimento',
        'Intercala close-ups e planos gerais, ritmo mais calmo para absor√ß√£o de informa√ß√µes',
        'C√¢mera fixa com foco rack para destacar elementos importantes da tend√™ncia'
      ],
      'resolution-cta': [
        'Wide shot para mostrar resultado final, movimento de crane-up para impacto visual',
        'Close-up final no personagem, 85mm, estabilizado para criar conex√£o com o p√∫blico',
        'Plano m√©dio com movimento circular, destacando o call-to-action e engajamento'
      ]
    };
    
    const styles = cameraStyles[paceElement as keyof typeof cameraStyles] || cameraStyles['hook-setup'];
    return styles[Math.floor(Math.random() * styles.length)];
  }

  private generateSetting(blockNumber: number, narrative: any, trend: any): string {
    return `Ambiente vibrante e otimizado para TikTok, com ilumina√ß√£o profissional que destaca o personagem. Cen√°rio relacionado a "${trend.keyword}" quando relevante, mantendo alta qualidade visual em todos os ${narrative.blockCount} blocos.`;
  }

  private generateLighting(blockNumber: number, totalBlocks: number, paceElement: string): string {
    const lightingMoods = {
      'hook-setup': 'Ilumina√ß√£o dram√°tica com contraste alto, luz principal forte para criar impacto visual imediato',
      'conflict': 'Lighting din√¢mico com mudan√ßas sutis, sombras estrat√©gicas para intensificar a tens√£o',
      'development': 'Ilumina√ß√£o equilibrada e profissional, tr√™s pontos cl√°ssicos para clareza visual',
      'resolution-cta': 'Luz brilhante e otimista, rim lighting para destacar o personagem e criar energia positiva'
    };
    
    return lightingMoods[paceElement as keyof typeof lightingMoods] || lightingMoods['hook-setup'];
  }

  private generateAudioDirection(character: any, blockNumber: number, narrative: any, trend: any): string {
    const audioLanguage = character.personality.match(/Audio Language:\s*([a-z-A-Z]+)/)?.[1] || 'pt-BR';
    const languageName = this.getLanguageName(audioLanguage);
    
    const audioTemplates = {
      1: `"${character.name}: Gente, voc√™s viram o que est√° acontecendo com ${trend.keyword}? N√£o acredito no que descobri!" Voz em ${languageName} com energia alta e curiosidade genu√≠na. Som de fundo: m√∫sica viral atual trending.`,
      2: `"${character.name}: Olha s√≥ o que aconteceu quando eu tentei ${trend.keyword}... isso mudou tudo!" Voz em ${languageName} com constru√ß√£o de suspense. Efeitos sonoros relevantes √† a√ß√£o.`,
      3: `"${character.name}: A verdade sobre ${trend.keyword} que ningu√©m te conta! Prepara que vai bombar!" Voz em ${languageName} com confian√ßa crescente. M√∫sica de fundo intensificando.`,
      4: `"${character.name}: Agora voc√™ precisa tentar! Marca seus amigos e mostra seu resultado! Link na bio!" Voz em ${languageName} com call-to-action claro. Som de finaliza√ß√£o viral.`
    };
    
    return audioTemplates[blockNumber as keyof typeof audioTemplates] || audioTemplates[1];
  }

  private generateTransition(blockNumber: number, totalBlocks: number): string {
    const transitions = [
      'Corte r√°pido com efeito de zoom, sincronizado com beat da m√∫sica',
      'Transi√ß√£o de swipe com overlay de hashtag da tend√™ncia',
      'Freeze frame com texto overlay, seguido de jump cut din√¢mico',
      'Efeito de glitch moderno com elementos visuais da tend√™ncia',
      'Speed ramp dram√°tico com mudan√ßa de √¢ngulo de c√¢mera'
    ];
    
    return transitions[Math.floor(Math.random() * transitions.length)];
  }

  private generateViralTitle(characterName: string, trendKeyword: string, contentType: string): string {
    const titleTemplates = {
      trending: [
        `${characterName} e a Verdade Sobre ${trendKeyword} Que Ningu√©m Te Conta! üî•`,
        `${characterName} Descobriu ${trendKeyword} e Isso Mudou Tudo! üò±`,
        `O Que ${characterName} Fez Com ${trendKeyword} Vai Te Surpreender! ‚ö°`,
        `${characterName}: ${trendKeyword} - A Tend√™ncia Que Est√° Bombando! üöÄ`
      ],
      comedy: [
        `${characterName} Tentou ${trendKeyword} e Olha No Que Deu! üòÇ`,
        `${characterName}: Como N√ÉO Fazer ${trendKeyword} (Muito Engra√ßado!) ü§£`,
        `${characterName} e o Fail √âpico Com ${trendKeyword}! üò≠`,
        `${characterName} vs ${trendKeyword}: Quem Vence? (Spoiler: Ningu√©m!) ü§™`
      ],
      horror: [
        `${characterName} Descobriu o Lado Sombrio de ${trendKeyword}... üò∞`,
        `${characterName}: O Que ${trendKeyword} Esconde Vai Te Assustar! üëª`,
        `${characterName} e o Mist√©rio Por Tr√°s de ${trendKeyword}! üåô`,
        `${characterName}: ${trendKeyword} - A Verdade Que Te Dar√° Pesadelos! üíÄ`
      ]
    };
    
    const templates = titleTemplates[contentType as keyof typeof titleTemplates] || titleTemplates.trending;
    return templates[Math.floor(Math.random() * templates.length)];
  }

  private getLanguageName(code: string): string {
    const names: Record<string, string> = {
      'pt-BR': 'Portugu√™s Brasileiro',
      'en-US': 'English',
      'es-ES': 'Espa√±ol',
      'es-MX': 'Espa√±ol Mexicano',
      'fr-FR': 'Fran√ßais'
    };
    return names[code] || 'Portugu√™s';
  }
} 